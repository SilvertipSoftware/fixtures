<?php

namespace SilvertipSoftware\Fixtures;

use Carbon\Carbon;

/**
 * Utility class for creating an array of table row data from an array of fixtures. The resultant row
 * data is insertable into the database.
 */
class TableRows
{

    /**
     * The class name of the model these rows are for. Passed to the row constructor.
     *
     * @var string
     */
    protected $model;

    /**
     * The rows generated by this class, grouped by table name. Multiple tables can be present due to building
     * relations. Gets converted to raw arrays of column data on toArray().
     *
     * @var array
     */
    protected $tables;

    /**
     * Create an instance for a given table, model, and fixture array.
     *
     * @param  string $table
     * @param  string $model
     * @param  array  $fixtures
     * @return void
     */
    public function __construct($table, $model, $fixtures)
    {
        $this->model = $model;
        $this->buildTableRowsFor($table, $fixtures);
    }

    /**
     * Get the model class name this instance is building records for.
     *
     * @return string
     */
    public function getModelClass()
    {
        return $this->model;
    }

    /**
     * Return all the rows as bare array data.
     *
     * @return array
     */
    public function toArray()
    {
        foreach ($this->tables as $key => $rows)
        {
            $this->tables[$key] = array_map(function ($row)
            {
                return is_array($row) ? $row : $row->toArray();
            }, $rows);
        }
        return $this->tables;
    }

    /**
     * Append rows to the named table. Used by TableRow to create relation table data.
     *
     * @param  string $name
     * @param  array  $rows
     * @return void
     */
    public function addRowsToTable($name, $rows)
    {
        $this->tables[$name] = array_merge(isset($this->tables[$name]) ? $this->tables[$name] : [], $rows);
    }

    /**
     * Iterates through the fixtures and builds the table rows for each one. Supplies a consistent
     * 'now' value for the default timestamps, if needed. Fixtures are keyed by label.
     *
     * @param  string $table
     * @param  array  $fixtures
     * @return void
     */
    private function buildTableRowsFor($table, $fixtures) {
        $now = Carbon::now();

        $rows = [];
        foreach ($fixtures as $label => $fixture) {
            $rows[] = new TableRow($fixture, $this, $label, $now);
        }
        $this->tables[$table] = $rows;
    }
}
